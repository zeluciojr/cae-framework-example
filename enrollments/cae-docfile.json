{ "domain": "Enrollments", "useCases": [ { "description": "To get the workflow description in natural language, enable the GPT extraction mode.", "scopes": [  ], "isProtected": "false", "useCaseDeclarationLocation": "com.zeluciojr.enrollments.core.use_cases.create_new_enrollment", "useCaseSourceCode": "package com.zeluciojr.enrollments.core.use_cases.create_new_enrollment.implementations;    import com.cae.mapped_exceptions.specifics.NotFoundMappedException;  import com.cae.use_cases.contexts.ExecutionContext;  import com.zeluciojr.enrollments.core.entities.Enrollment;  import com.zeluciojr.enrollments.core.entities.Person;  import com.zeluciojr.enrollments.core.entities.Role;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment.CreateNewEnrollmentUseCase;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment.implementations.ports.NewEnrollmentPersistencePort;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment.implementations.ports.PersonRetrievalByIdPort;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment.implementations.ports.RoleRetrievalByIdPort;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment.io.inputs.CreateNewEnrollmentUseCaseInput;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment.io.outputs.CreateNewEnrollmentUseCaseOutput;  import lombok.RequiredArgsConstructor;    import java.util.UUID;    /**   * This class implements the CreateNewEnrollmentUseCase, containing all the internal logic for its operation.   * Since it is a FunctionUseCase, its purpose is to supply something, based on its input.   * <p>   * Important: Avoid hardcoding any sensitive information in this code. The auto-documentation   * process will analyze this section of the source code if the GPT mode is enabled.   */  @RequiredArgsConstructor  public class CreateNewEnrollmentUseCaseImplementation extends CreateNewEnrollmentUseCase {        private final PersonRetrievalByIdPort personRetrievalByIdPort;      private final RoleRetrievalByIdPort roleRetrievalByIdPort;      private final NewEnrollmentPersistencePort newEnrollmentPersistencePort;        @Override      protected CreateNewEnrollmentUseCaseOutput applyInternalLogic(              CreateNewEnrollmentUseCaseInput input,              ExecutionContext context) {          var personToEnroll = this.findPersonBy(input.getPersonId(), context);          var roleToAssign = this.findRoleBy(input.getRoleId(), context);          var newEnrollment = Enrollment.createNewOneFor(personToEnroll, roleToAssign);          this.save(newEnrollment, context);          return new CreateNewEnrollmentUseCaseOutput(newEnrollment.getId().toString());      }        private Person findPersonBy(String personId, ExecutionContext context) {          return this.personRetrievalByIdPort.executePortOn(UUID.fromString(personId), context)                  .orElseThrow(() -> new NotFoundMappedException(                          \"Couldn't find the person to enroll\",                          \"ID provided was '\" + personId + \"'\"                  ));      }        private Role findRoleBy(String roleId, ExecutionContext context) {          return this.roleRetrievalByIdPort.executePortOn(UUID.fromString(roleId), context)                  .orElseThrow(() -> new NotFoundMappedException(                          \"Couldn't find the role to assign\",                          \"ID provided was '\" + roleId + \"'\"                  ));      }        private void save(Enrollment newEnrollment, ExecutionContext context) {          this.newEnrollmentPersistencePort.executePortOn(newEnrollment, context);      }    }  ", "useCaseDeclaration": "CreateNewEnrollmentUseCase", "useCaseImplementationLocation": "com.zeluciojr.enrollments.core.use_cases.create_new_enrollment.implementations", "useCaseImplementation": "CreateNewEnrollmentUseCaseImplementation", "ioContract": [ { "input": "true", "className": "CreateNewEnrollmentUseCaseInput", "classFields": [ { "fieldType": "String", "fieldName": "personId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" }, { "fieldType": "String", "fieldName": "roleId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" } ] }, { "input": "false", "className": "CreateNewEnrollmentUseCaseOutput", "classFields": [ { "fieldType": "String", "fieldName": "newEnrollmentId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "false", "isNotBlank": "false" } ] } ] }, { "description": "To get the workflow description in natural language, enable the GPT extraction mode.", "scopes": [  ], "isProtected": "false", "useCaseDeclarationLocation": "com.zeluciojr.enrollments.core.use_cases.create_new_enrollment_experience", "useCaseSourceCode": "package com.zeluciojr.enrollments.core.use_cases.create_new_enrollment_experience.implementations;    import com.cae.mapped_exceptions.specifics.NotFoundMappedException;  import com.cae.use_cases.contexts.ExecutionContext;  import com.zeluciojr.enrollments.core.entities.Enrollment;  import com.zeluciojr.enrollments.core.entities.Role;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment_experience.CreateNewEnrollmentExperienceUseCase;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment_experience.implementations.ports.EnrollmentRetrievalByIdPort;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment_experience.implementations.ports.EnrollmentUpdatePort;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment_experience.implementations.ports.RoleRetrievalByIdPort;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment_experience.io.inputs.CreateNewEnrollmentExperienceUseCaseInput;  import com.zeluciojr.enrollments.core.use_cases.create_new_enrollment_experience.io.outputs.CreateNewEnrollmentExperienceUseCaseOutput;  import lombok.RequiredArgsConstructor;    import java.util.UUID;    /**   * This class implements the CreateNewEnrollmentExperienceUseCase, containing all the internal logic for its operation.   * Since it is a FunctionUseCase, its purpose is to supply something, based on its input.   * <p>   * Important: Avoid hardcoding any sensitive information in this code. The auto-documentation   * process will analyze this section of the source code if the GPT mode is enabled.   */  @RequiredArgsConstructor  public class CreateNewEnrollmentExperienceUseCaseImplementation extends CreateNewEnrollmentExperienceUseCase {        private final EnrollmentRetrievalByIdPort enrollmentRetrievalByIdPort;      private final RoleRetrievalByIdPort roleRetrievalByIdPort;      private final EnrollmentUpdatePort enrollmentUpdatePort;        @Override      protected CreateNewEnrollmentExperienceUseCaseOutput applyInternalLogic(              CreateNewEnrollmentExperienceUseCaseInput input,              ExecutionContext context) {          var enrollment = this.findEnrollmentBy(input.getEnrollmentId(), context);          var role = this.findRoleBy(input.getRoleId(), context);          var newXp = enrollment.addNewExperienceAs(role);          this.update(enrollment, context);          return new CreateNewEnrollmentExperienceUseCaseOutput(newXp.getId().toString());      }        private Enrollment findEnrollmentBy(String enrollmentId, ExecutionContext context) {          return this.enrollmentRetrievalByIdPort.executePortOn(UUID.fromString(enrollmentId), context)                  .orElseThrow(() -> new NotFoundMappedException(                          \"Couldn't find enrollment by ID of \" + enrollmentId                  ));      }        private Role findRoleBy(String roleId, ExecutionContext context) {          return this.roleRetrievalByIdPort.executePortOn(UUID.fromString(roleId), context)                  .orElseThrow(() -> new NotFoundMappedException(                          \"Couldn't find role by ID of \" + roleId                  ));      }        private void update(              Enrollment enrollment,              ExecutionContext context) {          this.enrollmentUpdatePort.executePortOn(enrollment, context);      }  }  ", "useCaseDeclaration": "CreateNewEnrollmentExperienceUseCase", "useCaseImplementationLocation": "com.zeluciojr.enrollments.core.use_cases.create_new_enrollment_experience.implementations", "useCaseImplementation": "CreateNewEnrollmentExperienceUseCaseImplementation", "ioContract": [ { "input": "true", "className": "CreateNewEnrollmentExperienceUseCaseInput", "classFields": [ { "fieldType": "String", "fieldName": "enrollmentId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" }, { "fieldType": "String", "fieldName": "roleId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" } ] }, { "input": "false", "className": "CreateNewEnrollmentExperienceUseCaseOutput", "classFields": [ { "fieldType": "String", "fieldName": "newExperienceId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "false", "isNotBlank": "false" } ] } ] }, { "description": "To get the workflow description in natural language, enable the GPT extraction mode.", "scopes": [  ], "isProtected": "false", "useCaseDeclarationLocation": "com.zeluciojr.enrollments.core.use_cases.create_new_person", "useCaseSourceCode": "package com.zeluciojr.enrollments.core.use_cases.create_new_person.implementations;    import com.cae.mapped_exceptions.specifics.InputMappedException;  import com.cae.use_cases.contexts.ExecutionContext;  import com.zeluciojr.enrollments.core.entities.Countries;  import com.zeluciojr.enrollments.core.entities.LegalId;  import com.zeluciojr.enrollments.core.entities.Person;  import com.zeluciojr.enrollments.core.use_cases.create_new_person.CreateNewPersonUseCase;  import com.zeluciojr.enrollments.core.use_cases.create_new_person.implementations.ports.NewPersonPersistencePort;  import com.zeluciojr.enrollments.core.use_cases.create_new_person.implementations.ports.PersonRetrievalByLegalIdPort;  import com.zeluciojr.enrollments.core.use_cases.create_new_person.io.inputs.CreateNewPersonUseCaseInput;  import com.zeluciojr.enrollments.core.use_cases.create_new_person.io.outputs.CreateNewPersonUseCaseOutput;  import lombok.RequiredArgsConstructor;    /**   * This class implements the CreateNewPersonUseCase, containing all the internal logic for its operation.   * Since it is a FunctionUseCase, its purpose is to supply something, based on its input.   * <p>   * Important: Avoid hardcoding any sensitive information in this code. The auto-documentation   * process will analyze this section of the source code if the GPT mode is enabled.   */  @RequiredArgsConstructor  public class CreateNewPersonUseCaseImplementation extends CreateNewPersonUseCase {        private final PersonRetrievalByLegalIdPort personRetrievalByLegalIdPort;      private final NewPersonPersistencePort newPersonPersistencePort;        @Override      protected CreateNewPersonUseCaseOutput applyInternalLogic(              CreateNewPersonUseCaseInput input,              ExecutionContext context) {          var country = this.getCountryOutta(input);          var legalId = this.getLegalIdFor(country, input);          if (legalId.isValid()){              this.checkAvailabilityOf(legalId, context);              var newPerson = Person.createNewOne(                      input.getFullName(),                      input.getPreferredName(),                      legalId              );              this.save(newPerson, context);              return new CreateNewPersonUseCaseOutput(newPerson.getId().toString());          }          else              throw new InputMappedException(\"Invalid legal ID provided\");      }        private Countries getCountryOutta(CreateNewPersonUseCaseInput input) {          return Countries.of(input.getCountry())                  .orElseThrow(() -> new InputMappedException(                          \"Couldn't process the informed country\",                          \"Allowed options: \" + Countries.getAllowedOptionsToString()                  ));      }        private LegalId getLegalIdFor(Countries country, CreateNewPersonUseCaseInput input) {          return country.getPersonalLegalIdConstructor()                  .apply(input.getLegalId());      }        private void checkAvailabilityOf(LegalId legalId, ExecutionContext context) {          var personWithSameLegalId = this.personRetrievalByLegalIdPort.executePortOn(legalId, context);          if (personWithSameLegalId.isPresent())              throw new InputMappedException(\"Legal ID has been taken\");      }        private void save(Person newPerson, ExecutionContext context) {          this.newPersonPersistencePort.executePortOn(newPerson, context);      }  }  ", "useCaseDeclaration": "CreateNewPersonUseCase", "useCaseImplementationLocation": "com.zeluciojr.enrollments.core.use_cases.create_new_person.implementations", "useCaseImplementation": "CreateNewPersonUseCaseImplementation", "ioContract": [ { "input": "true", "className": "CreateNewPersonUseCaseInput", "classFields": [ { "fieldType": "String", "fieldName": "legalId", "isSensitive": "true", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" }, { "fieldType": "String", "fieldName": "country", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" }, { "fieldType": "String", "fieldName": "fullName", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" }, { "fieldType": "String", "fieldName": "preferredName", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "false", "isNotBlank": "false" } ] }, { "input": "false", "className": "CreateNewPersonUseCaseOutput", "classFields": [ { "fieldType": "String", "fieldName": "newPersonId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "false", "isNotBlank": "false" } ] } ] }, { "description": "To get the workflow description in natural language, enable the GPT extraction mode.", "scopes": [  ], "isProtected": "false", "useCaseDeclarationLocation": "com.zeluciojr.enrollments.core.use_cases.create_new_role", "useCaseSourceCode": "package com.zeluciojr.enrollments.core.use_cases.create_new_role.implementations;    import com.cae.use_cases.contexts.ExecutionContext;  import com.zeluciojr.enrollments.core.entities.Role;  import com.zeluciojr.enrollments.core.use_cases.create_new_role.CreateNewRoleUseCase;  import com.zeluciojr.enrollments.core.use_cases.create_new_role.implementations.ports.NewRolePersistencePort;  import com.zeluciojr.enrollments.core.use_cases.create_new_role.io.inputs.CreateNewRoleUseCaseInput;  import com.zeluciojr.enrollments.core.use_cases.create_new_role.io.outputs.CreateNewRoleUseCaseOutput;  import lombok.RequiredArgsConstructor;    /**   * This class implements the CreateNewRoleUseCase, containing all the internal logic for its operation.   * Since it is a FunctionUseCase, its purpose is to supply something, based on its input.   * <p>   * Important: Avoid hardcoding any sensitive information in this code. The auto-documentation   * process will analyze this section of the source code if the GPT mode is enabled.   */  @RequiredArgsConstructor  public class CreateNewRoleUseCaseImplementation extends CreateNewRoleUseCase {        private final NewRolePersistencePort newRolePersistencePort;        @Override      protected CreateNewRoleUseCaseOutput applyInternalLogic(              CreateNewRoleUseCaseInput input,              ExecutionContext context) {          var newRole = Role.createNewOne(                  input.getRoleName(),                  input.getRoleDescription()          );          this.save(newRole, context);          return new CreateNewRoleUseCaseOutput(newRole.getId().toString());      }        private void save(Role newRole, ExecutionContext context) {          this.newRolePersistencePort.executePortOn(newRole, context);      }  }  ", "useCaseDeclaration": "CreateNewRoleUseCase", "useCaseImplementationLocation": "com.zeluciojr.enrollments.core.use_cases.create_new_role.implementations", "useCaseImplementation": "CreateNewRoleUseCaseImplementation", "ioContract": [ { "input": "true", "className": "CreateNewRoleUseCaseInput", "classFields": [ { "fieldType": "String", "fieldName": "roleName", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" }, { "fieldType": "String", "fieldName": "roleDescription", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "false", "isNotBlank": "true" } ] }, { "input": "false", "className": "CreateNewRoleUseCaseOutput", "classFields": [ { "fieldType": "String", "fieldName": "newRoleId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "false", "isNotBlank": "false" } ] } ] }, { "description": "To get the workflow description in natural language, enable the GPT extraction mode.", "scopes": [  ], "isProtected": "false", "useCaseDeclarationLocation": "com.zeluciojr.enrollments.core.use_cases.end_enrollment", "useCaseSourceCode": "package com.zeluciojr.enrollments.core.use_cases.end_enrollment.implementations;    import com.cae.mapped_exceptions.specifics.NotFoundMappedException;  import com.cae.use_cases.contexts.ExecutionContext;  import com.zeluciojr.enrollments.core.entities.Enrollment;  import com.zeluciojr.enrollments.core.use_cases.end_enrollment.EndEnrollmentUseCase;  import com.zeluciojr.enrollments.core.use_cases.end_enrollment.implementations.ports.EnrollmentRetrievalByIdPort;  import com.zeluciojr.enrollments.core.use_cases.end_enrollment.implementations.ports.EnrollmentUpdatePort;  import com.zeluciojr.enrollments.core.use_cases.end_enrollment.io.inputs.EndEnrollmentUseCaseInput;  import lombok.RequiredArgsConstructor;    import java.util.UUID;    /**   * This class implements the EndEnrollmentUseCase, containing all the internal logic for its operation.   * Since it is a FunctionUseCase, its purpose is to supply something, based on its input.   * <p>   * Important: Avoid hardcoding any sensitive information in this code. The auto-documentation   * process will analyze this section of the source code if the GPT mode is enabled.   */  @RequiredArgsConstructor  public class EndEnrollmentUseCaseImplementation extends EndEnrollmentUseCase {        private final EnrollmentRetrievalByIdPort enrollmentRetrievalByIdPort;      private final EnrollmentUpdatePort enrollmentUpdatePort;        @Override      protected void applyInternalLogic(              EndEnrollmentUseCaseInput input,              ExecutionContext context) {          var enrollmentToEnd = this.getEnrollmentBy(input.getEnrollmentId(), context);          enrollmentToEnd.end();          this.update(enrollmentToEnd, context);      }        private Enrollment getEnrollmentBy(String enrollmentId, ExecutionContext context) {          return this.enrollmentRetrievalByIdPort.executePortOn(UUID.fromString(enrollmentId), context)                  .orElseThrow(() -> new NotFoundMappedException(                          \"Couldn't find enrollment of ID \" + enrollmentId                  ));      }        private void update(Enrollment enrollmentToEnd, ExecutionContext context) {          this.enrollmentUpdatePort.executePortOn(enrollmentToEnd, context);      }  }  ", "useCaseDeclaration": "EndEnrollmentUseCase", "useCaseImplementationLocation": "com.zeluciojr.enrollments.core.use_cases.end_enrollment.implementations", "useCaseImplementation": "EndEnrollmentUseCaseImplementation", "ioContract": [ { "input": "true", "className": "EndEnrollmentUseCaseInput", "classFields": [ { "fieldType": "String", "fieldName": "enrollmentId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" } ] } ] }, { "description": "To get the workflow description in natural language, enable the GPT extraction mode.", "scopes": [  ], "isProtected": "false", "useCaseDeclarationLocation": "com.zeluciojr.enrollments.core.use_cases.get_enrollment_by_id", "useCaseSourceCode": "package com.zeluciojr.enrollments.core.use_cases.get_enrollment_by_id.implementations;    import com.cae.mapped_exceptions.specifics.NotFoundMappedException;  import com.cae.use_cases.contexts.ExecutionContext;  import com.zeluciojr.enrollments.core.entities.Enrollment;  import com.zeluciojr.enrollments.core.use_cases.get_enrollment_by_id.GetEnrollmentByIdUseCase;  import com.zeluciojr.enrollments.core.use_cases.get_enrollment_by_id.implementations.ports.EnrollmentRetrievalByIdPort;  import com.zeluciojr.enrollments.core.use_cases.get_enrollment_by_id.io.inputs.GetEnrollmentByIdUseCaseInput;  import com.zeluciojr.enrollments.core.use_cases.get_enrollment_by_id.io.outputs.GetEnrollmentByIdUseCaseOutput;  import lombok.RequiredArgsConstructor;    import java.util.UUID;    /**   * This class implements the GetEnrollmentByIdUseCase, containing all the internal logic for its operation.   * Since it is a FunctionUseCase, its purpose is to supply something, based on its input.   * <p>   * Important: Avoid hardcoding any sensitive information in this code. The auto-documentation   * process will analyze this section of the source code if the GPT mode is enabled.   */  @RequiredArgsConstructor  public class GetEnrollmentByIdUseCaseImplementation extends GetEnrollmentByIdUseCase {        private final EnrollmentRetrievalByIdPort enrollmentRetrievalByIdPort;        @Override      protected GetEnrollmentByIdUseCaseOutput applyInternalLogic(              GetEnrollmentByIdUseCaseInput input,              ExecutionContext context) {          var enrollment = this.getEnrollmentBy(input.getEnrollmentId(), context);          return new GetEnrollmentByIdUseCaseOutput(enrollment);      }        private Enrollment getEnrollmentBy(String enrollmentId, ExecutionContext context) {          return this.enrollmentRetrievalByIdPort.executePortOn(UUID.fromString(enrollmentId), context)                  .orElseThrow(() -> new NotFoundMappedException(                          \"Couldn't find enrollment of ID \" + enrollmentId                  ));      }  }  ", "useCaseDeclaration": "GetEnrollmentByIdUseCase", "useCaseImplementationLocation": "com.zeluciojr.enrollments.core.use_cases.get_enrollment_by_id.implementations", "useCaseImplementation": "GetEnrollmentByIdUseCaseImplementation", "ioContract": [ { "input": "true", "className": "GetEnrollmentByIdUseCaseInput", "classFields": [ { "fieldType": "String", "fieldName": "enrollmentId", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "true", "isNotBlank": "true" } ] }, { "input": "false", "className": "GetEnrollmentByIdUseCaseOutput", "classFields": [ { "fieldType": "Enrollment", "fieldName": "enrollment", "isSensitive": "false", "isNotEmpty": "false", "isNotNull": "false", "isNotBlank": "false" } ] } ] } ] }
